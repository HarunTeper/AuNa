---
#------------------------------------------------------------------------------
# EXTENSION DEFINITIONS
#------------------------------------------------------------------------------
x-common-base: &common-base
  privileged: true
  network_mode: host
  env_file:
    - .env
  stdin_open: true
  tty: true
  pull_policy: build

x-build-package-base: &build-package-base
  context: .
  dockerfile: dockerfiles/package.dockerfile
  args:
    PIP_BREAK_SYSTEM_PACKAGES: ${PIP_BREAK_SYSTEM_PACKAGES}

x-package-base: &package-base
  <<: *common-base
  build:
    <<: *build-package-base
  volumes:
    - ./packages/src:/home/ubuntu/workspace/packages/src:cached
    - ./traces:/shared/traces:rw
    - ./lttng:/shared/lttng:rw

x-physical-base: &physical-base
  <<: *common-base
  build:
    <<: *build-package-base
  volumes:
    - /dev:/dev
    - ./packages/src:/home/ubuntu/workspace/packages/src:cached
    - ./traces:/shared/traces:rw
    - ./lttng:/shared/lttng:rw

x-gui-base: &gui-base
  <<: *common-base
  build:
    <<: *build-package-base
  volumes:
    - ./packages/src:/home/ubuntu/workspace/packages/src:cached
    - ./traces:/shared/traces:rw
    - ./lttng:/shared/lttng:rw
    - /tmp/.X11-unix:/tmp/.X11-unix:rw
    - ${XDG_RUNTIME_DIR}:/tmp/runtime-ubuntu:rw
  environment:
    - DISPLAY=${DISPLAY}
    - XDG_RUNTIME_DIR=/tmp/runtime-ubuntu
    - QT_X11_NO_MITSHM=1

x-dev-base: &dev-base
  <<: *common-base
  build:
    context: .
    dockerfile: dockerfiles/development.dockerfile
    args:
      - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
  user: "ubuntu"
  volumes:
    - /dev:/dev
    - .:/home/ubuntu/workspace:cached
    - /tmp/.X11-unix:/tmp/.X11-unix:rw
    - ${XDG_RUNTIME_DIR}:/tmp/runtime-ubuntu:rw
  environment:
    - DISPLAY=${DISPLAY}
    - XDG_RUNTIME_DIR=/tmp/runtime-ubuntu
    - QT_X11_NO_MITSHM=1

services:
  #==============================================================================
  # BASE SERVICE
  #==============================================================================
  # Minimal base image without ROS packages - used for building other images
  base:
    build:
      context: .
      dockerfile: dockerfiles/base.dockerfile
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - HOST_UID=${HOST_UID}
        - HOST_GID=${HOST_GID}
        - ROS_DOMAIN_ID=${ROS_DOMAIN_ID}
    image: base:latest
    pull_policy: build
    env_file:
      - .env
    profiles: ["base"]

  #==============================================================================
  # CORE NETWORK SERVICES
  #==============================================================================

  # Zenohd - distributed data exchange service
  zenohd:
    <<: *package-base
    image: zenohd:latest
    pull_policy: build
    container_name: zenohd
    command: ["ros2", "run", "rmw_zenoh_cpp", "rmw_zenohd"]
    profiles: ["zenohd", "sim_scenario", "sim_scenario_1"]

  #==============================================================================
  # GAZEBO SERVICES
  #==============================================================================

  gazebo:
    <<: *gui-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${GAZEBO_PACKAGES}
    image: gazebo:latest
    pull_policy: build
    container_name: gazebo
    command:
      [
        "/bin/bash",
        "-c",
        "ros2 launch auna_gazebo gazebo_world.launch.py use_sim_time:=true",
      ]
    profiles: ["sim", "sim_scenario", "sim_scenario_1"]

  spawn_robot:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${GAZEBO_PACKAGES}
    image: spawn_robot:latest
    pull_policy: build
    container_name: spawn_robot
    command: ["ros2", "launch", "auna_gazebo", "spawn_robot.launch.py"]
    profiles: ["spawn_robot"]

  spawn_robot_robot1:
    extends: spawn_robot
    container_name: spawn_robot_robot1
    environment:
      - ROBOT_INDEX=1
    profiles: ["sim_robot1", "sim_scenario", "sim_scenario_1"]

  spawn_robot_robot2:
    extends: spawn_robot
    container_name: spawn_robot_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "sim_scenario"]

  spawn_robot_robot3:
    extends: spawn_robot
    container_name: spawn_robot_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "sim_scenario"]

  #==============================================================================
  # GROUND TRUTH SERVICES
  #==============================================================================

  ground_truth_static_transform:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${GROUND_TRUTH_PACKAGES}
    image: ground_truth_static_transform:latest
    pull_policy: build
    container_name: ground_truth_static_transform
    command:
      [
        "ros2",
        "launch",
        "auna_ground_truth",
        "static_transform.launch.py",
        "use_sim_time:=true",
      ]
    profiles: ["sim", "sim_scenario", "sim_scenario_1"]

  ground_truth:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${GROUND_TRUTH_PACKAGES}
    image: ground_truth:latest
    pull_policy: build
    container_name: ground_truth
    command: ["ros2", "launch", "auna_ground_truth", "ground_truth.launch.py"]
    profiles: ["ground_truth"]

  ground_truth_robot1:
    extends: ground_truth
    container_name: ground_truth_robot1
    environment:
      - ROBOT_INDEX=1
    profiles: ["sim_robot1", "sim_scenario", "sim_scenario_1"]

  ground_truth_robot2:
    extends: ground_truth
    container_name: ground_truth_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "sim_scenario"]

  ground_truth_robot3:
    extends: ground_truth
    container_name: ground_truth_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "sim_scenario"]

  #==============================================================================
  # TF SERVICES
  #==============================================================================

  global_tf:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${TF_PACKAGES}
    image: global_tf:latest
    pull_policy: build
    container_name: global_tf
    command:
      ["ros2", "launch", "auna_tf", "global_tf.launch.py", "use_sim_time:=true"]
    profiles: ["sim", "sim_scenario", "sim_scenario_1"]

  #==============================================================================
  # LOCALIZATION SERVICES
  #==============================================================================

  localization_pose:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${TF_PACKAGES}
    image: localization_pose:latest
    pull_policy: build
    container_name: localization_pose
    command:
      [
        "ros2",
        "launch",
        "auna_tf",
        "localization_pose_publisher.launch.py",
        "use_sim_time:=true",
      ]
    profiles: ["localization_pose"]

  localization_pose_robot1:
    extends: localization_pose
    container_name: localization_pose_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  localization_pose_robot2:
    extends: localization_pose
    container_name: localization_pose_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  localization_pose_robot3:
    extends: localization_pose
    container_name: localization_pose_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # CMD MULTIPLEXER SERVICES
  #==============================================================================

  cmd_multiplexer:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${CONTROL_PANEL_PACKAGES}
    image: cmd_multiplexer:latest
    pull_policy: build
    container_name: cmd_multiplexer
    command: ["ros2", "launch", "auna_control", "cmd_vel_multiplexer.launch.py"]
    profiles: ["cmd_multiplexer"]

  cmd_multiplexer_robot1:
    extends: cmd_multiplexer
    container_name: cmd_multiplexer_robot1
    environment:
      - ROBOT_INDEX=1
      - INITIAL_SOURCE=OFF
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  cmd_multiplexer_robot2:
    extends: cmd_multiplexer
    container_name: cmd_multiplexer_robot2
    environment:
      - ROBOT_INDEX=2
      - INITIAL_SOURCE=cacc
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  cmd_multiplexer_robot3:
    extends: cmd_multiplexer
    container_name: cmd_multiplexer_robot3
    environment:
      - ROBOT_INDEX=3
      - INITIAL_SOURCE=cacc
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # CONTROL PANEL SERVICES
  #==============================================================================

  control_panel:
    <<: *gui-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${CONTROL_PANEL_PACKAGES}
    image: control_panel:latest
    pull_policy: build
    container_name: control_panel
    command: ["ros2", "launch", "auna_control", "control_panel.launch.py"]
    profiles: ["control_panel"]

  control_panel_robot1:
    extends: control_panel
    container_name: control_panel_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  control_panel_robot2:
    extends: control_panel
    container_name: control_panel_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  control_panel_robot3:
    extends: control_panel
    container_name: control_panel_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # EKF LOCALIZATION SERVICES
  #==============================================================================

  ekf_localization_sim:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${EKF_PACKAGES}
    image: ekf_localization:latest
    pull_policy: build
    container_name: ekf_localization
    command: ["ros2", "launch", "auna_ekf", "ekf_sim.launch.py"]
    profiles: ["ekf_localization"]

  ekf_localization_sim_robot1:
    extends: ekf_localization_sim
    container_name: ekf_localization_robot1
    environment:
      - ROBOT_INDEX=1
    profiles: ["sim_robot1", "sim_scenario", "sim_scenario_1"]

  ekf_localization_sim_robot2:
    extends: ekf_localization_sim
    container_name: ekf_localization_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "sim_scenario"]

  ekf_localization_sim_robot3:
    extends: ekf_localization_sim
    container_name: ekf_localization_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "sim_scenario"]

  #==============================================================================
  # NAVIGATION SERVICES
  #==============================================================================

  nav2_stack:
    <<: *gui-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${NAV2_PACKAGES}
    image: nav2_stack:latest
    pull_policy: build
    container_name: nav2_stack
    command:
      [
        "ros2",
        "launch",
        "auna_nav2",
        "navigation_single_robot.launch.py",
        "use_sim_time:=true",
      ]
    profiles: ["base"]

  nav2_stack_robot1:
    extends: nav2_stack
    container_name: nav2_stack_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  nav2_stack_robot2:
    extends: nav2_stack
    container_name: nav2_stack_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  nav2_stack_robot3:
    extends: nav2_stack
    container_name: nav2_stack_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # CACC CONTROLLER SERVICES
  #==============================================================================

  cacc_controller:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${CACC_PACKAGES}
    image: cacc_controller:latest
    pull_policy: build
    container_name: cacc_controller
    command: ["ros2", "launch", "auna_cacc", "single_cacc_controller.launch.py"]
    profiles: ["cacc_controller"]

  cacc_controller_robot1:
    extends: cacc_controller
    container_name: cacc_controller_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  cacc_controller_robot2:
    extends: cacc_controller
    container_name: cacc_controller_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  cacc_controller_robot3:
    extends: cacc_controller
    container_name: cacc_controller_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # WALL FOLLOWING SERVICES
  #==============================================================================

  wallfollowing:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${WALLFOLLOWING_PACKAGES}
    image: wallfollowing:latest
    pull_policy: build
    container_name: wallfollowing
    command: ["ros2", "launch", "auna_wallfollowing", "wallfollowing.launch.py"]
    profiles: ["wallfollowing"]

  wallfollowing_robot1:
    extends: wallfollowing
    container_name: wallfollowing_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  wallfollowing_robot2:
    extends: wallfollowing
    container_name: wallfollowing_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  wallfollowing_robot3:
    extends: wallfollowing
    container_name: wallfollowing_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # WAYPOINT PUBLISHER SERVICES
  #==============================================================================

  waypoint_publisher:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${WAYPOINT_PUBLISHER_PACKAGES}
    image: waypoint_publisher:latest
    pull_policy: build
    container_name: waypoint_publisher
    command:
      ["ros2", "launch", "auna_waypoints", "waypoint_publisher.launch.py"]
    profiles: ["waypoint_publisher"]

  waypoint_publisher_robot1:
    extends: waypoint_publisher
    container_name: waypoint_publisher_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  waypoint_publisher_robot2:
    extends: waypoint_publisher
    container_name: waypoint_publisher_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  waypoint_publisher_robot3:
    extends: waypoint_publisher
    container_name: waypoint_publisher_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # MAP SERVICES
  #==============================================================================

  map_server:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${NAV2_PACKAGES}
    image: map_server:latest
    pull_policy: build
    container_name: map_server
    command:
      [
        "ros2",
        "launch",
        "auna_nav2",
        "map_server.launch.py",
        "map_name:=${MAP_NAME}",
      ]
    profiles: ["sim", "sim_scenario"]

  #==============================================================================
  # DEVELOPMENT SERVICES
  #==============================================================================

  development:
    <<: *dev-base
    image: development:latest
    pull_policy: build
    container_name: development
    command:
      [
        "/bin/bash",
        "-c",
        "cd packages && colcon build --symlink-install --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=ON && cd .. && /bin/bash",
      ]
    profiles: ["development"]

  #==============================================================================
  # CONTROL & TELEOPERATION SERVICES
  #==============================================================================

  teleop:
    <<: *gui-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${TELEOP_PACKAGES}
    image: teleop:latest
    pull_policy: build
    container_name: teleop
    command:
      [
        "/bin/bash",
        "-c",
        "source /home/ubuntu/workspace/packages/install/setup.bash && cd packages && source install/setup.bash && ros2 run auna_teleoperation keyboard_teleop_hold --ros-args --params-file src/auna_teleoperation/config/key_teleop.yaml",
      ]
    profiles: ["teleop", "manual_control"]

  #==============================================================================
  # CURVE FITTING SERVICES
  #==============================================================================

  curve_fitting:
    <<: *gui-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${WAYPOINT_PUBLISHER_PACKAGES}
    image: curve_fitting:latest
    pull_policy: build
    container_name: curve_fitting
    command: ["ros2", "launch", "auna_waypoints", "curve_fitting.launch.py"]
    profiles: ["curve_fitting"]

  #==============================================================================
  # DEMO SERVICES
  #==============================================================================

  talker:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - INSTALL_PACKAGE_NAMES=${DEMO_PACKAGES}
    image: talker:latest
    pull_policy: build
    container_name: talker
    command: ["ros2", "run", "demo_nodes_cpp", "talker"]
    profiles: ["talker"]

  listener:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - INSTALL_PACKAGE_NAMES=${DEMO_PACKAGES}
    image: listener:latest
    pull_policy: build
    container_name: listener
    command: ["ros2", "run", "demo_nodes_cpp", "listener"]
    profiles: ["listener"]

  #==============================================================================
  # TF2 TOOLS
  #==============================================================================

  tf2_trees:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - INSTALL_PACKAGE_NAMES=${TF2_TOOLS_PACKAGES}
    image: tf2_trees:latest
    pull_policy: build
    container_name: tf2_trees
    volumes:
      - .:/home/ubuntu/workspace:cached
    command:
      [
        "bash",
        "-c",
        "mkdir -p tf2_trees && cd tf2_trees &&ros2 run tf2_tools view_frames && ros2 run tf2_tools view_frames --ros-args -r /tf:=/robot1/tf -r /tf_static:=/robot1/tf_static && ros2 run tf2_tools view_frames --ros-args -r /tf:=/robot2/tf -r /tf_static:=/robot2/tf_static && ros2 run tf2_tools view_frames --ros-args -r /tf:=/robot3/tf -r /tf_static:=/robot3/tf_static",
      ]
    profiles: ["tf2_trees"]

  #==============================================================================
  # RQT SERVICES
  #==============================================================================

  rqt_base:
    <<: *gui-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - INSTALL_PACKAGE_NAMES=${RQT_PACKAGES}
    image: rqt:latest
    pull_policy: build
    container_name: rqt
    command: ["rqt"]
    profiles: ["rqt"]

  rqt_reconfigure:
    extends: rqt_base
    container_name: rqt_reconfigure
    profiles: ["rqt_reconfigure"]
    command: ["ros2", "run", "rqt_reconfigure", "rqt_reconfigure"]

  rqt_graph:
    extends: rqt_base
    container_name: rqt_graph
    command: ["ros2", "run", "rqt_graph", "rqt_graph"]
    profiles: ["rqt_graph"]

  #==============================================================================
  # COMMUNICATION SERVICES
  #==============================================================================

  cam_communication:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${COMM_PACKAGES}
    image: cam_communication:latest
    pull_policy: build
    container_name: cam_communication
    command:
      ["ros2", "launch", "auna_comm", "single_cam_communication.launch.py"]
    profiles: ["base"]

  cam_communication_robot1:
    extends: cam_communication
    container_name: cam_communication_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  cam_communication_robot2:
    extends: cam_communication
    container_name: cam_communication_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  cam_communication_robot3:
    extends: cam_communication
    container_name: cam_communication_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # OMNET SERVICES
  #==============================================================================

  omnet:
    <<: *gui-base
    build:
      context: .
      dockerfile: dockerfiles/omnet.dockerfile
    image: omnet:latest
    pull_policy: build
    container_name: omnet
    command: ["/bin/bash", "-c", "echo 'Hello from OMNeT++!' && exec /bin/bash"]
    profiles: ["omnet"]

  #==============================================================================
  # TRACING SERVICES
  #==============================================================================

  tracing:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
    image: tracing:latest
    pull_policy: build
    container_name: tracing
    command: ["/bin/bash", "-c", "ros2 trace"]
    profiles: ["tracing"]

  analysis:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
    volumes:
      - .:/home/ubuntu/workspace
    image: tracing:latest
    pull_policy: build
    container_name: tracing
    command: ["/bin/bash", "-c", "/bin/bash"]
    profiles: ["tracing"]

  # Add a test service to your docker-compose.yml
  test_tracing:
    <<: *package-base
    image: test_tracing:latest
    container_name: test_tracing
    command:
      [
        "/bin/bash",
        "-c",
        "while true; do ros2 topic pub /test_topic std_msgs/String 'data: hello'; sleep 0.01; done",
      ]
    profiles: ["test_tracing"]
