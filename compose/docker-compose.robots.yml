---
#------------------------------------------------------------------------------
# EXTENSION DEFINITIONS
#------------------------------------------------------------------------------
x-common-base: &common-base
  privileged: true
  network_mode: host
  env_file:
    - ../.env
  stdin_open: true
  tty: true
  pull_policy: build

x-build-package-base: &build-package-base
  context: ../.
  dockerfile: dockerfiles/package.dockerfile
  args:
    PIP_BREAK_SYSTEM_PACKAGES: ${PIP_BREAK_SYSTEM_PACKAGES}

x-package-base: &package-base
  <<: *common-base
  build:
    <<: *build-package-base
  volumes:
    - ../packages/src:/home/ubuntu/workspace/packages/src:cached

x-gui-base: &gui-base
  <<: *common-base
  build:
    <<: *build-package-base
  volumes:
    - ./../packages/src:/home/ubuntu/workspace/packages/src:cached
    - /tmp/.X11-unix:/tmp/.X11-unix:rw
    - ${XDG_RUNTIME_DIR}:/tmp/runtime-ubuntu:rw
  environment:
    - DISPLAY=${DISPLAY}
    - XDG_RUNTIME_DIR=/tmp/runtime-ubuntu
    - QT_X11_NO_MITSHM=1

services:
  #==============================================================================
  # LOCALIZATION SERVICES
  #==============================================================================

  localization_pose:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${TF_PACKAGES}
    image: localization_pose:latest
    pull_policy: build
    container_name: localization_pose
    command:
      ["ros2", "launch", "auna_tf", "localization_pose_publisher.launch.py"]
    profiles: ["localization_pose"]

  localization_pose_robot1:
    extends: localization_pose
    container_name: localization_pose_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  localization_pose_robot2:
    extends: localization_pose
    container_name: localization_pose_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  localization_pose_robot3:
    extends: localization_pose
    container_name: localization_pose_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # CMD MULTIPLEXER SERVICES
  #==============================================================================

  cmd_multiplexer:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${CONTROL_PANEL_PACKAGES}
    image: cmd_multiplexer:latest
    pull_policy: build
    container_name: cmd_multiplexer
    command:
      [
        "ros2",
        "launch",
        "auna_control",
        "cmd_vel_multiplexer.launch.py",
        "initial_source:=cacc",
      ]
    profiles: ["cmd_multiplexer"]

  cmd_multiplexer_robot1:
    extends: cmd_multiplexer
    container_name: cmd_multiplexer_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  cmd_multiplexer_robot2:
    extends: cmd_multiplexer
    container_name: cmd_multiplexer_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  cmd_multiplexer_robot3:
    extends: cmd_multiplexer
    container_name: cmd_multiplexer_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # CONTROL PANEL SERVICES
  #==============================================================================

  control_panel:
    <<: *gui-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${CONTROL_PANEL_PACKAGES}
    image: control_panel:latest
    pull_policy: build
    container_name: control_panel
    command: ["ros2", "launch", "auna_control", "control_panel.launch.py"]
    profiles: ["control_panel"]

  control_panel_robot1:
    extends: control_panel
    container_name: control_panel_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  control_panel_robot2:
    extends: control_panel
    container_name: control_panel_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  control_panel_robot3:
    extends: control_panel
    container_name: control_panel_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # EKF LOCALIZATION SERVICES
  #==============================================================================

  ekf_localization_sim:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${EKF_PACKAGES}
    image: ekf_localization:latest
    pull_policy: build
    container_name: ekf_localization
    command: ["ros2", "launch", "auna_ekf", "ekf_sim.launch.py"]
    profiles: ["ekf_localization"]

  ekf_localization_sim_robot1:
    extends: ekf_localization_sim
    container_name: ekf_localization_robot1
    environment:
      - ROBOT_INDEX=1
    profiles: ["sim_robot1", "sim_scenario", "sim_scenario_1"]

  ekf_localization_sim_robot2:
    extends: ekf_localization_sim
    container_name: ekf_localization_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "sim_scenario"]

  ekf_localization_sim_robot3:
    extends: ekf_localization_sim
    container_name: ekf_localization_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "sim_scenario"]

  #==============================================================================
  # NAVIGATION SERVICES
  #==============================================================================

  nav2_stack:
    <<: *gui-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${NAV2_PACKAGES}
    image: nav2_stack:latest
    pull_policy: build
    container_name: nav2_stack
    profiles: ["base"]

  nav2_stack_robot1:
    extends: nav2_stack
    container_name: nav2_stack_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  nav2_stack_robot2:
    extends: nav2_stack
    container_name: nav2_stack_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  nav2_stack_robot3:
    extends: nav2_stack
    container_name: nav2_stack_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # CACC CONTROLLER SERVICES
  #==============================================================================

  cacc_controller:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${CACC_PACKAGES}
    image: cacc_controller:latest
    pull_policy: build
    container_name: cacc_controller
    command: ["ros2", "launch", "auna_cacc", "single_cacc_controller.launch.py"]
    profiles: ["cacc_controller"]

  cacc_controller_robot1:
    extends: cacc_controller
    container_name: cacc_controller_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  cacc_controller_robot2:
    extends: cacc_controller
    container_name: cacc_controller_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  cacc_controller_robot3:
    extends: cacc_controller
    container_name: cacc_controller_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # WALL FOLLOWING SERVICES
  #==============================================================================

  wallfollowing:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${WALLFOLLOWING_PACKAGES}
    image: wallfollowing:latest
    pull_policy: build
    container_name: wallfollowing
    command: ["ros2", "launch", "auna_wallfollowing", "wallfollowing.launch.py"]
    profiles: ["wallfollowing"]

  wallfollowing_robot1:
    extends: wallfollowing
    container_name: wallfollowing_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  wallfollowing_robot2:
    extends: wallfollowing
    container_name: wallfollowing_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  wallfollowing_robot3:
    extends: wallfollowing
    container_name: wallfollowing_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # WAYPOINT PUBLISHER SERVICES
  #==============================================================================

  waypoint_publisher:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${WAYPOINT_PUBLISHER_PACKAGES}
    image: waypoint_publisher:latest
    pull_policy: build
    container_name: waypoint_publisher
    command:
      ["ros2", "launch", "auna_waypoints", "waypoint_publisher.launch.py"]
    profiles: ["waypoint_publisher"]

  waypoint_publisher_robot1:
    extends: waypoint_publisher
    container_name: waypoint_publisher_robot1
    environment:
      - ROBOT_INDEX=1
    profiles:
      ["sim_robot1", "physical_robot1", "sim_scenario", "sim_scenario_1"]

  waypoint_publisher_robot2:
    extends: waypoint_publisher
    container_name: waypoint_publisher_robot2
    environment:
      - ROBOT_INDEX=2
    profiles: ["sim_robot2", "physical_robot2", "sim_scenario"]

  waypoint_publisher_robot3:
    extends: waypoint_publisher
    container_name: waypoint_publisher_robot3
    environment:
      - ROBOT_INDEX=3
    profiles: ["sim_robot3", "physical_robot3", "sim_scenario"]

  #==============================================================================
  # MAP SERVICES
  #==============================================================================

  map_server:
    <<: *package-base
    build:
      <<: *build-package-base
      args:
        - PIP_BREAK_SYSTEM_PACKAGES=${PIP_BREAK_SYSTEM_PACKAGES}
        - PACKAGE_NAMES=${NAV2_PACKAGES}
    image: map_server:latest
    pull_policy: build
    container_name: map_server
    command:
      [
        "ros2",
        "launch",
        "auna_nav2",
        "map_server.launch.py",
        "map_name:=${MAP_NAME}",
      ]
    profiles: ["sim", "sim_scenario"]
