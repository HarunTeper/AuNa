<?xml version="1.0"?>
<robot name="sam_bot" xmlns:xacro="http://ros.org/wiki/xacro">
  
  <!-- Arguments -->
  <xacro:arg name="namespace" default=""/>

  <!-- Properties -->
  <xacro:property name="cameraSizeL" value="0.03"/>
  <xacro:property name="cameraSizeB" value="0.03"/>
  <xacro:property name="cameraSizeH" value="0.17"/>
  <xacro:property name="cameraMass" value="0.1"/>

  <xacro:property name="hokuyoSize" value="0.1"/>
  <xacro:property name="hokuyoMass" value="0.1"/>

  <xacro:property name="bodySizeL" value="0.49"/>
  <xacro:property name="bodySizeB" value="0.18"/>
  <xacro:property name="bodySizeH" value="0.1"/>
  <xacro:property name="bodyMass" value="3.5"/>

  <xacro:property name="wheel_radius" value="0.05" /> 
  <xacro:property name="wheel_height" value="0.045" />
  <xacro:property name="wheel_mass" value="0.2" />
  
  <xacro:property name="base_x_origin_to_wheel_origin" value="0.16" />
  <xacro:property name="base_y_origin_to_wheel_origin" value="0.1055" />
  <xacro:property name="base_z_origin_to_wheel_origin" value="0" />
  <xacro:property name="base_x_sphere_origin_to_wheel_origin" value="0.000" />
  <xacro:property name="base_y_sphere_origin_to_wheel_origin" value="0.001" />
  <xacro:property name="base_z_sphere_origin_to_wheel_origin" value="0" />

  <xacro:property name="steering_radius" value="0.01" /> 
  <xacro:property name="steering_mass" value="0.07" />

  <!-- Inertias -->
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
              iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
              izz="${m*r*r/2}" /> 
  </xacro:macro>

  <xacro:macro name="box_inertia" params="m l b h">
    <inertia  ixx="${m*(b*b+h*h)/12}" ixy = "0" ixz = "0"
              iyy="${m*(l*l+h*h)/12}" iyz = "0"
              izz="${m*(l*l+b*b)/12}" /> 
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertia  ixx="${2*m*(r*r)/3}" ixy = "0" ixz = "0"
              iyy="${2*m*(r*r)/3}" iyz = "0"
              izz="${2*m*(r*r)/3}" /> 
  </xacro:macro>
  
  <!-- Wheel macro -->
  <xacro:macro name="wheel" params="fb lr parent translateX translateY left OffsetJointX OffsetJointY OffsetJointZ OffsetY">
    <link name="$(arg namespace)${lr}_wheel_${fb}">
      <inertial>
        <mass value="${wheel_mass}" />
        <origin xyz="0 ${OffsetY} 0" rpy="${90*pi/180} 0 0"/>
        <xacro:cylinder_inertia  m="${wheel_mass}" r="${wheel_radius}" h="${wheel_height}" />
      </inertial>

      <collision>
        <origin xyz="0 ${OffsetY} 0" rpy="${90*pi/180} 0 0 " />
        <geometry>
          <cylinder length="${wheel_height}" radius="${wheel_radius}" />
        </geometry>
      </collision>

      <visual>
        <origin xyz="0 ${OffsetY} 0" rpy="0 0 ${left*pi}" /> 
        <geometry>
          <mesh filename="file:///$(find auna_gazebo)/models/race_car/meshes/wheel.dae"/>
        </geometry>
      </visual>      
    </link>

    <joint name="${lr}_wheel_${fb}_hinge" type="continuous">
      <parent link="$(arg namespace)${parent}"/>
      <child link="$(arg namespace)${lr}_wheel_${fb}"/>
      <origin xyz="${translateX * OffsetJointX} ${translateY * OffsetJointY} ${OffsetJointZ}" rpy="0 0 0" /> 
      <axis xyz="0 1 0" rpy="0 0 0" />
      <limit effort="20" velocity="500"/>
      <joint_properties damping="1e-9" friction="1e-9"/>
    </joint>

    <transmission name="${lr}_wheel_${fb}_transmission" type="SimpleTransmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${lr}_wheel_${fb}_hinge">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="${lr}_wheel_${fb}_motor">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>    

    <gazebo reference="${lr}_wheel_${fb}">
      <mu1>0.9</mu1>
      <mu2>0.9</mu2>
    </gazebo> 
  </xacro:macro>

  <!-- Steering macro -->
  <xacro:macro name="steering_hinge" params="lr parent translateY OffsetY">
    <link name="$(arg namespace)${lr}_steering">
      <inertial>
        <mass value="${steering_mass}" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <xacro:sphere_inertia  m="${steering_mass}" r="${steering_radius}" />
      </inertial>

      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" /> 
        <geometry>
          <sphere radius="${steering_radius}"/>
        </geometry> 
      </visual>  
    </link>

    <gazebo reference="${lr}_steering">
      <material>Gazebo/Grey</material>
    </gazebo>

    <joint name="${lr}_steering_hinge" type="continuous">
      <origin xyz="${base_x_origin_to_wheel_origin} ${translateY * base_y_origin_to_wheel_origin} ${base_z_origin_to_wheel_origin}" rpy="0 0 0" />
      <parent link="$(arg namespace)${parent}" />
      <child link="$(arg namespace)${lr}_steering" />
      <axis xyz="0 0 1" />
      <limit lower="-1.0" upper="1.0" effort="10" velocity="100" />
    </joint>

    <transmission name="${lr}_steering_hinge_transmission" type="SimpleTransmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${lr}_steering_hinge">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="${lr}_steering_hinge_motor">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>



  <!--  Base Link  -->
  <link name="$(arg namespace)base_link" />

  <!--  Chassis  -->
  <joint name="base_link_joint" type="fixed">
    <origin xyz="${base_x_origin_to_wheel_origin} 0 0.05" rpy="0 0 0" />
    <parent link="$(arg namespace)base_link" />
    <child link="$(arg namespace)chassis" />
  </joint>

  <link name='$(arg namespace)chassis'>
    <inertial>
      <mass value="${bodyMass}"/>
      <origin xyz="0 0 ${wheel_height/2}" rpy=" 0 0 0"/>
      <xacro:box_inertia m="${bodyMass}" l="${bodySizeL}" b="${bodySizeB}" h="${bodySizeH}" />
    </inertial>

    <collision name='collision'>
      <origin xyz="0 0 ${wheel_height/2}" rpy=" 0 0 0"/>
      <geometry>
        <box size="${bodySizeL} ${bodySizeB} ${bodySizeH}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <mesh filename="file:///$(find auna_gazebo)/models/race_car/meshes/car.dae"/>
      </geometry>
    </visual>
  </link>

  <!--  Steering wheel  -->
  <joint name="steering_wheel_joint" type="continuous">
    <origin xyz="0.105 0 0.135" rpy="0 0 0" />
    <parent link="$(arg namespace)chassis" />
    <child link="$(arg namespace)steering_wheel" />
    <axis xyz="1 0 0" />
    <limit lower="-7.85" upper="7.85" effort="10000000" velocity="1000000"/>
  </joint>

  <link name='$(arg namespace)steering_wheel'>
    <inertial>
      <mass value="0.1"/>
      <xacro:box_inertia m="0.1" l="0.01" b="0.01" h="0.01" />
    </inertial>
    <collision name='collision'>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
  </link>

  <!--  Wheels  -->
  <xacro:wheel fb="front" lr="left" parent="left_steering" translateX="1" translateY="1" left="1" OffsetJointX= "${base_x_sphere_origin_to_wheel_origin}" OffsetJointY= "${base_y_sphere_origin_to_wheel_origin}" OffsetJointZ= "${base_z_sphere_origin_to_wheel_origin}" OffsetY="0.02" />

  <xacro:wheel fb="front" lr="right" parent="right_steering" translateX="1" translateY="-1" left="0" OffsetJointX= "${base_x_sphere_origin_to_wheel_origin}" OffsetJointY= "${base_y_sphere_origin_to_wheel_origin}" OffsetJointZ= "${base_z_sphere_origin_to_wheel_origin}" OffsetY="-0.02" />

  <xacro:wheel fb="back" lr="left" parent="chassis" translateX="-1" translateY="1" left="1" OffsetJointX= "${base_x_origin_to_wheel_origin}" OffsetJointY= "${base_y_origin_to_wheel_origin}" OffsetJointZ= "${base_z_origin_to_wheel_origin}" OffsetY="0.021" />

  <xacro:wheel fb="back" lr="right" parent="chassis" translateX="-1" translateY="-1" left="0" OffsetJointX= "${base_x_origin_to_wheel_origin}" OffsetJointY= "${base_y_origin_to_wheel_origin}" OffsetJointZ= "${base_z_origin_to_wheel_origin}" OffsetY="-0.021" />
  
  
  <!--  Steering  -->
  <xacro:steering_hinge lr="left" parent="chassis" translateY="1" OffsetY="0.01" />
  <xacro:steering_hinge lr="right" parent="chassis" translateY="-1" OffsetY="-0.01" />

  <!-- Camera -->
  <link name="$(arg namespace)camera">
    <inertial>
      <mass value="${cameraMass}" />
      <origin xyz="0 0 ${wheel_height/2}" rpy="0 0 0"/>
      <xacro:box_inertia m="${cameraMass}" l="${cameraSizeL}" b="${cameraSizeB}" h="${cameraSizeH}" />
    </inertial>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${cameraSizeL} ${cameraSizeH} ${cameraSizeB}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file:///$(find auna_gazebo)/models/race_car/meshes/ZED.dae"/>
      </geometry>
    </visual>
  </link>

  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0.21 0 0.075" rpy="0 0 0"/>
    <parent link="$(arg namespace)chassis"/>
    <child link="$(arg namespace)camera"/>
  </joint>

  <!-- Hokuyo Laser -->
  <link name="$(arg namespace)laser">
    <inertial>
      <mass value="${hokuyoMass}" />
      <origin xyz="0 0 ${wheel_height/2}" rpy="0 0 0"/>
      <xacro:box_inertia m="${hokuyoMass}" l="${hokuyoSize}" b="${hokuyoSize}" h="${hokuyoSize}" />
    </inertial>

    <collision>
      <origin xyz="0 0 ${wheel_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${hokuyoSize} ${hokuyoSize} ${hokuyoSize}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 ${wheel_height/2}" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file:///$(find auna_gazebo)/models/race_car/meshes/hokuyo.dae"/>
      </geometry>
    </visual>
  </link>

  <joint name="laser_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0.21 0 0.135" rpy="0 0 0"/>
    <parent link="$(arg namespace)chassis"/>
    <child link="$(arg namespace)laser"/>
  </joint>

  <!-- IMU -->
  <link name="$(arg namespace)imu_link" />

  <joint name="imu_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0 0 0.135" rpy="0 0 0"/>
    <parent link="$(arg namespace)chassis"/>
    <child link="$(arg namespace)imu_link"/>
  </joint>
  
  <!-- Plugins --> 

  <!-- Ackermann drive -->
  <gazebo>
    <plugin name='ackermann_drive' filename='libgazebo_ros_ackermann_drive.so'>
      <update_rate>100.0</update_rate>

      <!-- wheels -->
      <front_left_joint>left_wheel_front_hinge</front_left_joint>
      <front_right_joint>right_wheel_front_hinge</front_right_joint>
      <rear_left_joint>left_wheel_back_hinge</rear_left_joint>
      <rear_right_joint>right_wheel_back_hinge</rear_right_joint>
      <left_steering_joint>left_steering_hinge</left_steering_joint>
      <right_steering_joint>right_steering_hinge</right_steering_joint>
      <steering_wheel_joint>steering_wheel_joint</steering_wheel_joint>

      <!-- Max absolute steer angle for tyre in radians-->
      <!-- Any cmd_vel angular z greater than this would be capped -->
      <max_steer>0.6458</max_steer>

      <!-- Max absolute steering angle of steering wheel -->
      <max_steering_angle>7.85</max_steering_angle>

      <!-- Max absolute linear speed in m/s -->
      <max_speed>10.0</max_speed>
      
      <left_steering_pid_gain>5 0 0.3</left_steering_pid_gain>
      <left_steering_i_range>0 0</left_steering_i_range>
      <right_steering_pid_gain>5 0 0.3</right_steering_pid_gain>
      <right_steering_i_range>0 0</right_steering_i_range>
      <linear_velocity_pid_gain>0.5 0 0</linear_velocity_pid_gain>
      <linear_velocity_i_range>0 0</linear_velocity_i_range>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>
      <publish_distance>true</publish_distance>
      
      <odometry_frame>$(arg namespace)odom</odometry_frame>
      <robot_base_frame>$(arg namespace)base_link</robot_base_frame>

      <ros>
        <argument>--ros-args --remap cmd_vel:=cmd_vel</argument>
        <argument>--ros-args --remap odom:=odom</argument>
        <argument>--ros-args --remap distance:=distance</argument>
        <remapping>/tf:=tf</remapping>
      </ros>

    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="robot_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>100</update_rate>
      <joint_name>left_wheel_front_hinge</joint_name>
      <joint_name>right_wheel_front_hinge</joint_name>
      <joint_name>left_wheel_back_hinge</joint_name>
      <joint_name>right_wheel_back_hinge</joint_name>
      <joint_name>left_steering_hinge</joint_name>
      <joint_name>right_steering_hinge</joint_name>
      <joint_name>steering_wheel_joint</joint_name>
    </plugin>   
  </gazebo>

  <!-- Laser Sensor -->
  <gazebo reference="$(arg namespace)laser">
    <sensor type="ray" name="laser">
      <visualize>0</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>1080</samples>
            <resolution>1</resolution>
            <min_angle>-2.35619</min_angle>
            <max_angle>2.35619</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.2</min>
          <max>30</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <update_rate>60</update_rate>
      <plugin name="laser" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
      </plugin>
    </sensor>
  </gazebo>
  
  <!-- IMU Sensor -->
  <gazebo reference="$(arg namespace)imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>200</update_rate>
      <visualize>true</visualize>
    </sensor>
  </gazebo>
  
  <!-- Camera -->
  <gazebo reference="$(arg namespace)camera">
    <sensor name="camera" type="camera" >
      <visualize>0</visualize>
      <update_rate>30</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>


</robot>
